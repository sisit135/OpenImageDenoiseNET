// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace OpenImageDenoise
{
    public enum OIDNDeviceType
    {
        OIDN_DEVICE_TYPE_DEFAULT = 0,
        OIDN_DEVICE_TYPE_CPU = 1,
        OIDN_DEVICE_TYPE_SYCL = 2,
        OIDN_DEVICE_TYPE_CUDA = 3,
        OIDN_DEVICE_TYPE_HIP = 4
    }

    public enum OIDNError
    {
        OIDN_ERROR_NONE = 0,
        OIDN_ERROR_UNKNOWN = 1,
        OIDN_ERROR_INVALID_ARGUMENT = 2,
        OIDN_ERROR_INVALID_OPERATION = 3,
        OIDN_ERROR_OUT_OF_MEMORY = 4,
        OIDN_ERROR_UNSUPPORTED_HARDWARE = 5,
        OIDN_ERROR_CANCELLED = 6
    }

    public enum OIDNFormat
    {
        OIDN_FORMAT_UNDEFINED = 0,
        OIDN_FORMAT_FLOAT = 1,
        OIDN_FORMAT_FLOAT2 = 2,
        OIDN_FORMAT_FLOAT3 = 3,
        OIDN_FORMAT_FLOAT4 = 4,
        OIDN_FORMAT_HALF = 257,
        OIDN_FORMAT_HALF2 = 258,
        OIDN_FORMAT_HALF3 = 259,
        OIDN_FORMAT_HALF4 = 260
    }

    public enum OIDNStorage
    {
        OIDN_STORAGE_UNDEFINED = 0,
        OIDN_STORAGE_HOST = 1,
        OIDN_STORAGE_DEVICE = 2,
        OIDN_STORAGE_MANAGED = 3
    }

    [Flags]
    public enum OIDNExternalMemoryTypeFlag
    {
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_NONE = 0,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_FD = 1,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_DMA_BUF = 2,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32 = 4,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32KMT = 8,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11TEXTURE = 16,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11TEXTURE_KMT = 32,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11RESOURCE = 64,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11RESOURCE_KMT = 128,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D12HEAP = 256,
        OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D12RESOURCE = 512
    }

    public enum OIDNQuality
    {
        OIDN_QUALITY_DEFAULT = 0,
        OIDN_QUALITY_BALANCED = 5,
        OIDN_QUALITY_HIGH = 6
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void OIDNErrorFunction(__IntPtr userPtr, global::OpenImageDenoise.OIDNError code, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool OIDNProgressMonitorFunction(__IntPtr userPtr, double n);

    public unsafe partial class CUstream_st
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.CUstream_st> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.CUstream_st>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenImageDenoise.CUstream_st managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenImageDenoise.CUstream_st managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static CUstream_st __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CUstream_st(native.ToPointer(), skipVTables);
        }

        internal static CUstream_st __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CUstream_st)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CUstream_st __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CUstream_st(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CUstream_st(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CUstream_st(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class IhipStreamT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.IhipStreamT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.IhipStreamT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenImageDenoise.IhipStreamT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenImageDenoise.IhipStreamT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IhipStreamT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IhipStreamT(native.ToPointer(), skipVTables);
        }

        internal static IhipStreamT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IhipStreamT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IhipStreamT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IhipStreamT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IhipStreamT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected IhipStreamT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class OIDNDeviceImpl
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.OIDNDeviceImpl> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.OIDNDeviceImpl>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenImageDenoise.OIDNDeviceImpl managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenImageDenoise.OIDNDeviceImpl managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static OIDNDeviceImpl __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new OIDNDeviceImpl(native.ToPointer(), skipVTables);
        }

        internal static OIDNDeviceImpl __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (OIDNDeviceImpl)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static OIDNDeviceImpl __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new OIDNDeviceImpl(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OIDNDeviceImpl(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected OIDNDeviceImpl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class OIDNBufferImpl
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.OIDNBufferImpl> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.OIDNBufferImpl>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenImageDenoise.OIDNBufferImpl managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenImageDenoise.OIDNBufferImpl managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static OIDNBufferImpl __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new OIDNBufferImpl(native.ToPointer(), skipVTables);
        }

        internal static OIDNBufferImpl __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (OIDNBufferImpl)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static OIDNBufferImpl __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new OIDNBufferImpl(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OIDNBufferImpl(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected OIDNBufferImpl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class OIDNFilterImpl
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.OIDNFilterImpl> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.OIDNFilterImpl>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenImageDenoise.OIDNFilterImpl managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenImageDenoise.OIDNFilterImpl managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static OIDNFilterImpl __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new OIDNFilterImpl(native.ToPointer(), skipVTables);
        }

        internal static OIDNFilterImpl __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (OIDNFilterImpl)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static OIDNFilterImpl __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new OIDNFilterImpl(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OIDNFilterImpl(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected OIDNFilterImpl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class oidn
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetNumPhysicalDevices", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OidnGetNumPhysicalDevices();

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetPhysicalDeviceBool", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OidnGetPhysicalDeviceBool(int physicalDeviceID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetPhysicalDeviceInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OidnGetPhysicalDeviceInt(int physicalDeviceID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnGetPhysicalDeviceUInt@@YAIHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint OidnGetPhysicalDeviceUInt(int physicalDeviceID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetPhysicalDeviceString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnGetPhysicalDeviceString(int physicalDeviceID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetPhysicalDeviceData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnGetPhysicalDeviceData(int physicalDeviceID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, ulong* byteSize);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewDevice(global::OpenImageDenoise.OIDNDeviceType type);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewDeviceByID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewDeviceByID(int physicalDeviceID);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewDeviceByUUID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewDeviceByUUID(__IntPtr uuid);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewDeviceByLUID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewDeviceByLUID(__IntPtr luid);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewDeviceByPCIAddress", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewDeviceByPCIAddress(int pciDomain, int pciBus, int pciDevice, int pciFunction);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewSYCLDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewSYCLDevice(__IntPtr queues, int numQueues);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewCUDADevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewCUDADevice(int* deviceIDs, __IntPtr streams, int numPairs);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewHIPDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewHIPDevice(int* deviceIDs, __IntPtr streams, int numPairs);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnRetainDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnRetainDevice(__IntPtr device);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnReleaseDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnReleaseDevice(__IntPtr device);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetDeviceBool", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetDeviceBool(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnSetDevice1b@@YAXPEAUOIDNDeviceImpl@@PEBD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetDevice1b(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetDeviceInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetDeviceInt(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnSetDevice1i@@YAXPEAUOIDNDeviceImpl@@PEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetDevice1i(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnSetDeviceUInt@@YAXPEAUOIDNDeviceImpl@@PEBDI@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetDeviceUInt(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, uint value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetDeviceBool", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OidnGetDeviceBool(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnGetDevice1b@@YA_NPEAUOIDNDeviceImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OidnGetDevice1b(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetDeviceInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OidnGetDeviceInt(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnGetDeviceUInt@@YAIPEAUOIDNDeviceImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint OidnGetDeviceUInt(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnGetDevice1i@@YAHPEAUOIDNDeviceImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OidnGetDevice1i(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetDeviceErrorFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetDeviceErrorFunction(__IntPtr device, __IntPtr func, __IntPtr userPtr);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetDeviceError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenImageDenoise.OIDNError OidnGetDeviceError(__IntPtr device, sbyte** outMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnCommitDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnCommitDevice(__IntPtr device);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSyncDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSyncDevice(__IntPtr device);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewBuffer(__IntPtr device, ulong byteSize);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewBufferWithStorage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewBufferWithStorage(__IntPtr device, ulong byteSize, global::OpenImageDenoise.OIDNStorage storage);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewSharedBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewSharedBuffer(__IntPtr device, __IntPtr devPtr, ulong byteSize);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewSharedBufferFromFD", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewSharedBufferFromFD(__IntPtr device, global::OpenImageDenoise.OIDNExternalMemoryTypeFlag fdType, int fd, ulong byteSize);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewSharedBufferFromWin32Handle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewSharedBufferFromWin32Handle(__IntPtr device, global::OpenImageDenoise.OIDNExternalMemoryTypeFlag handleType, __IntPtr handle, __IntPtr name, ulong byteSize);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetBufferSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong OidnGetBufferSize(__IntPtr buffer);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetBufferStorage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenImageDenoise.OIDNStorage OidnGetBufferStorage(__IntPtr buffer);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetBufferData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnGetBufferData(__IntPtr buffer);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnReadBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnReadBuffer(__IntPtr buffer, ulong byteOffset, ulong byteSize, __IntPtr dstHostPtr);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnReadBufferAsync", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnReadBufferAsync(__IntPtr buffer, ulong byteOffset, ulong byteSize, __IntPtr dstHostPtr);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnWriteBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnWriteBuffer(__IntPtr buffer, ulong byteOffset, ulong byteSize, __IntPtr srcHostPtr);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnWriteBufferAsync", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnWriteBufferAsync(__IntPtr buffer, ulong byteOffset, ulong byteSize, __IntPtr srcHostPtr);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnRetainBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnRetainBuffer(__IntPtr buffer);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnReleaseBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnReleaseBuffer(__IntPtr buffer);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnNewFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OidnNewFilter(__IntPtr device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string type);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnRetainFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnRetainFilter(__IntPtr filter);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnReleaseFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnReleaseFilter(__IntPtr filter);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetFilterImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilterImage(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, __IntPtr buffer, global::OpenImageDenoise.OIDNFormat format, ulong width, ulong height, ulong byteOffset, ulong pixelByteStride, ulong rowByteStride);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetSharedFilterImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetSharedFilterImage(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, __IntPtr devPtr, global::OpenImageDenoise.OIDNFormat format, ulong width, ulong height, ulong byteOffset, ulong pixelByteStride, ulong rowByteStride);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnUnsetFilterImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnUnsetFilterImage(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnRemoveFilterImage@@YAXPEAUOIDNFilterImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnRemoveFilterImage(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetSharedFilterData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetSharedFilterData(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, __IntPtr hostPtr, ulong byteSize);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnUpdateFilterData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnUpdateFilterData(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnUnsetFilterData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnUnsetFilterData(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnRemoveFilterData@@YAXPEAUOIDNFilterImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnRemoveFilterData(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetFilterBool", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilterBool(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnSetFilter1b@@YAXPEAUOIDNFilterImpl@@PEBD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilter1b(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetFilterBool", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OidnGetFilterBool(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnGetFilter1b@@YA_NPEAUOIDNFilterImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OidnGetFilter1b(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetFilterInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilterInt(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnSetFilter1i@@YAXPEAUOIDNFilterImpl@@PEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilter1i(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetFilterInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OidnGetFilterInt(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnGetFilter1i@@YAHPEAUOIDNFilterImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OidnGetFilter1i(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetFilterFloat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilterFloat(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, float value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnSetFilter1f@@YAXPEAUOIDNFilterImpl@@PEBDM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilter1f(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, float value);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnGetFilterFloat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float OidnGetFilterFloat(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "?oidnGetFilter1f@@YAMPEAUOIDNFilterImpl@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float OidnGetFilter1f(__IntPtr filter, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnSetFilterProgressMonitorFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnSetFilterProgressMonitorFunction(__IntPtr filter, __IntPtr func, __IntPtr userPtr);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnCommitFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnCommitFilter(__IntPtr filter);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnExecuteFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnExecuteFilter(__IntPtr filter);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnExecuteFilterAsync", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnExecuteFilterAsync(__IntPtr filter);

            [SuppressUnmanagedCodeSecurity, DllImport("OpenImageDenoise", EntryPoint = "oidnExecuteSYCLFilterAsync", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OidnExecuteSYCLFilterAsync(__IntPtr filter, __IntPtr depEvents, int numDepEvents, __IntPtr doneEvent);
        }

        public static int OidnGetNumPhysicalDevices()
        {
            var ___ret = __Internal.OidnGetNumPhysicalDevices();
            return ___ret;
        }

        public static bool OidnGetPhysicalDeviceBool(int physicalDeviceID, string name)
        {
            var ___ret = __Internal.OidnGetPhysicalDeviceBool(physicalDeviceID, name);
            return ___ret;
        }

        public static int OidnGetPhysicalDeviceInt(int physicalDeviceID, string name)
        {
            var ___ret = __Internal.OidnGetPhysicalDeviceInt(physicalDeviceID, name);
            return ___ret;
        }

        public static uint OidnGetPhysicalDeviceUInt(int physicalDeviceID, string name)
        {
            var ___ret = __Internal.OidnGetPhysicalDeviceUInt(physicalDeviceID, name);
            return ___ret;
        }

        public static string OidnGetPhysicalDeviceString(int physicalDeviceID, string name)
        {
            var ___ret = __Internal.OidnGetPhysicalDeviceString(physicalDeviceID, name);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static __IntPtr OidnGetPhysicalDeviceData(int physicalDeviceID, string name, ref ulong byteSize)
        {
            fixed (ulong* __byteSize2 = &byteSize)
            {
                var __arg2 = __byteSize2;
                var ___ret = __Internal.OidnGetPhysicalDeviceData(physicalDeviceID, name, __arg2);
                return ___ret;
            }
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewDevice(global::OpenImageDenoise.OIDNDeviceType type)
        {
            var ___ret = __Internal.OidnNewDevice(type);
            var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewDeviceByID(int physicalDeviceID)
        {
            var ___ret = __Internal.OidnNewDeviceByID(physicalDeviceID);
            var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewDeviceByUUID(__IntPtr uuid)
        {
            var ___ret = __Internal.OidnNewDeviceByUUID(uuid);
            var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewDeviceByLUID(__IntPtr luid)
        {
            var ___ret = __Internal.OidnNewDeviceByLUID(luid);
            var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewDeviceByPCIAddress(int pciDomain, int pciBus, int pciDevice, int pciFunction)
        {
            var ___ret = __Internal.OidnNewDeviceByPCIAddress(pciDomain, pciBus, pciDevice, pciFunction);
            var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewSYCLDevice(global::OpenImageDenoise.Sycl.Queue queues, int numQueues)
        {
            var __arg0 = queues is null ? __IntPtr.Zero : queues.__Instance;
            var ___ret = __Internal.OidnNewSYCLDevice(__arg0, numQueues);
            var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewCUDADevice(ref int deviceIDs, global::OpenImageDenoise.CUstream_st streams, int numPairs)
        {
            fixed (int* __deviceIDs0 = &deviceIDs)
            {
                var __arg0 = __deviceIDs0;
                var ____arg1 = streams is null ? __IntPtr.Zero : streams.__Instance;
                var __arg1 = new __IntPtr(&____arg1);
                var ___ret = __Internal.OidnNewCUDADevice(__arg0, __arg1, numPairs);
                var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public static global::OpenImageDenoise.OIDNDeviceImpl OidnNewHIPDevice(ref int deviceIDs, global::OpenImageDenoise.IhipStreamT streams, int numPairs)
        {
            fixed (int* __deviceIDs0 = &deviceIDs)
            {
                var __arg0 = __deviceIDs0;
                var ____arg1 = streams is null ? __IntPtr.Zero : streams.__Instance;
                var __arg1 = new __IntPtr(&____arg1);
                var ___ret = __Internal.OidnNewHIPDevice(__arg0, __arg1, numPairs);
                var __result0 = global::OpenImageDenoise.OIDNDeviceImpl.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public static void OidnRetainDevice(global::OpenImageDenoise.OIDNDeviceImpl device)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnRetainDevice(__arg0);
        }

        public static void OidnReleaseDevice(global::OpenImageDenoise.OIDNDeviceImpl device)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnReleaseDevice(__arg0);
        }

        public static void OidnSetDeviceBool(global::OpenImageDenoise.OIDNDeviceImpl device, string name, bool value)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnSetDeviceBool(__arg0, name, value);
        }

        public static void OidnSetDevice1b(global::OpenImageDenoise.OIDNDeviceImpl device, string name, bool value)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnSetDevice1b(__arg0, name, value);
        }

        public static void OidnSetDeviceInt(global::OpenImageDenoise.OIDNDeviceImpl device, string name, int value)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnSetDeviceInt(__arg0, name, value);
        }

        public static void OidnSetDevice1i(global::OpenImageDenoise.OIDNDeviceImpl device, string name, int value)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnSetDevice1i(__arg0, name, value);
        }

        public static void OidnSetDeviceUInt(global::OpenImageDenoise.OIDNDeviceImpl device, string name, uint value)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnSetDeviceUInt(__arg0, name, value);
        }

        public static bool OidnGetDeviceBool(global::OpenImageDenoise.OIDNDeviceImpl device, string name)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnGetDeviceBool(__arg0, name);
            return ___ret;
        }

        public static bool OidnGetDevice1b(global::OpenImageDenoise.OIDNDeviceImpl device, string name)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnGetDevice1b(__arg0, name);
            return ___ret;
        }

        public static int OidnGetDeviceInt(global::OpenImageDenoise.OIDNDeviceImpl device, string name)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnGetDeviceInt(__arg0, name);
            return ___ret;
        }

        public static uint OidnGetDeviceUInt(global::OpenImageDenoise.OIDNDeviceImpl device, string name)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnGetDeviceUInt(__arg0, name);
            return ___ret;
        }

        public static int OidnGetDevice1i(global::OpenImageDenoise.OIDNDeviceImpl device, string name)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnGetDevice1i(__arg0, name);
            return ___ret;
        }

        public static void OidnSetDeviceErrorFunction(global::OpenImageDenoise.OIDNDeviceImpl device, global::OpenImageDenoise.OIDNErrorFunction func, __IntPtr userPtr)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var __arg1 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            __Internal.OidnSetDeviceErrorFunction(__arg0, __arg1, userPtr);
        }

        public static global::OpenImageDenoise.OIDNError OidnGetDeviceError(global::OpenImageDenoise.OIDNDeviceImpl device, sbyte** outMessage)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnGetDeviceError(__arg0, outMessage);
            return ___ret;
        }

        public static void OidnCommitDevice(global::OpenImageDenoise.OIDNDeviceImpl device)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnCommitDevice(__arg0);
        }

        public static void OidnSyncDevice(global::OpenImageDenoise.OIDNDeviceImpl device)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            __Internal.OidnSyncDevice(__arg0);
        }

        public static global::OpenImageDenoise.OIDNBufferImpl OidnNewBuffer(global::OpenImageDenoise.OIDNDeviceImpl device, ulong byteSize)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnNewBuffer(__arg0, byteSize);
            var __result0 = global::OpenImageDenoise.OIDNBufferImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNBufferImpl OidnNewBufferWithStorage(global::OpenImageDenoise.OIDNDeviceImpl device, ulong byteSize, global::OpenImageDenoise.OIDNStorage storage)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnNewBufferWithStorage(__arg0, byteSize, storage);
            var __result0 = global::OpenImageDenoise.OIDNBufferImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNBufferImpl OidnNewSharedBuffer(global::OpenImageDenoise.OIDNDeviceImpl device, __IntPtr devPtr, ulong byteSize)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnNewSharedBuffer(__arg0, devPtr, byteSize);
            var __result0 = global::OpenImageDenoise.OIDNBufferImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNBufferImpl OidnNewSharedBufferFromFD(global::OpenImageDenoise.OIDNDeviceImpl device, global::OpenImageDenoise.OIDNExternalMemoryTypeFlag fdType, int fd, ulong byteSize)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnNewSharedBufferFromFD(__arg0, fdType, fd, byteSize);
            var __result0 = global::OpenImageDenoise.OIDNBufferImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::OpenImageDenoise.OIDNBufferImpl OidnNewSharedBufferFromWin32Handle(global::OpenImageDenoise.OIDNDeviceImpl device, global::OpenImageDenoise.OIDNExternalMemoryTypeFlag handleType, __IntPtr handle, __IntPtr name, ulong byteSize)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnNewSharedBufferFromWin32Handle(__arg0, handleType, handle, name, byteSize);
            var __result0 = global::OpenImageDenoise.OIDNBufferImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static ulong OidnGetBufferSize(global::OpenImageDenoise.OIDNBufferImpl buffer)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            var ___ret = __Internal.OidnGetBufferSize(__arg0);
            return ___ret;
        }

        public static global::OpenImageDenoise.OIDNStorage OidnGetBufferStorage(global::OpenImageDenoise.OIDNBufferImpl buffer)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            var ___ret = __Internal.OidnGetBufferStorage(__arg0);
            return ___ret;
        }

        public static __IntPtr OidnGetBufferData(global::OpenImageDenoise.OIDNBufferImpl buffer)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            var ___ret = __Internal.OidnGetBufferData(__arg0);
            return ___ret;
        }

        public static void OidnReadBuffer(global::OpenImageDenoise.OIDNBufferImpl buffer, ulong byteOffset, ulong byteSize, __IntPtr dstHostPtr)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            __Internal.OidnReadBuffer(__arg0, byteOffset, byteSize, dstHostPtr);
        }

        public static void OidnReadBufferAsync(global::OpenImageDenoise.OIDNBufferImpl buffer, ulong byteOffset, ulong byteSize, __IntPtr dstHostPtr)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            __Internal.OidnReadBufferAsync(__arg0, byteOffset, byteSize, dstHostPtr);
        }

        public static void OidnWriteBuffer(global::OpenImageDenoise.OIDNBufferImpl buffer, ulong byteOffset, ulong byteSize, __IntPtr srcHostPtr)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            __Internal.OidnWriteBuffer(__arg0, byteOffset, byteSize, srcHostPtr);
        }

        public static void OidnWriteBufferAsync(global::OpenImageDenoise.OIDNBufferImpl buffer, ulong byteOffset, ulong byteSize, __IntPtr srcHostPtr)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            __Internal.OidnWriteBufferAsync(__arg0, byteOffset, byteSize, srcHostPtr);
        }

        public static void OidnRetainBuffer(global::OpenImageDenoise.OIDNBufferImpl buffer)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            __Internal.OidnRetainBuffer(__arg0);
        }

        public static void OidnReleaseBuffer(global::OpenImageDenoise.OIDNBufferImpl buffer)
        {
            var __arg0 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            __Internal.OidnReleaseBuffer(__arg0);
        }

        public static global::OpenImageDenoise.OIDNFilterImpl OidnNewFilter(global::OpenImageDenoise.OIDNDeviceImpl device, string type)
        {
            var __arg0 = device is null ? __IntPtr.Zero : device.__Instance;
            var ___ret = __Internal.OidnNewFilter(__arg0, type);
            var __result0 = global::OpenImageDenoise.OIDNFilterImpl.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static void OidnRetainFilter(global::OpenImageDenoise.OIDNFilterImpl filter)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnRetainFilter(__arg0);
        }

        public static void OidnReleaseFilter(global::OpenImageDenoise.OIDNFilterImpl filter)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnReleaseFilter(__arg0);
        }

        public static void OidnSetFilterImage(global::OpenImageDenoise.OIDNFilterImpl filter, string name, global::OpenImageDenoise.OIDNBufferImpl buffer, global::OpenImageDenoise.OIDNFormat format, ulong width, ulong height, ulong byteOffset, ulong pixelByteStride, ulong rowByteStride)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var __arg2 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            __Internal.OidnSetFilterImage(__arg0, name, __arg2, format, width, height, byteOffset, pixelByteStride, rowByteStride);
        }

        public static void OidnSetSharedFilterImage(global::OpenImageDenoise.OIDNFilterImpl filter, string name, __IntPtr devPtr, global::OpenImageDenoise.OIDNFormat format, ulong width, ulong height, ulong byteOffset, ulong pixelByteStride, ulong rowByteStride)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetSharedFilterImage(__arg0, name, devPtr, format, width, height, byteOffset, pixelByteStride, rowByteStride);
        }

        public static void OidnUnsetFilterImage(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnUnsetFilterImage(__arg0, name);
        }

        public static void OidnRemoveFilterImage(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnRemoveFilterImage(__arg0, name);
        }

        public static void OidnSetSharedFilterData(global::OpenImageDenoise.OIDNFilterImpl filter, string name, __IntPtr hostPtr, ulong byteSize)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetSharedFilterData(__arg0, name, hostPtr, byteSize);
        }

        public static void OidnUpdateFilterData(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnUpdateFilterData(__arg0, name);
        }

        public static void OidnUnsetFilterData(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnUnsetFilterData(__arg0, name);
        }

        public static void OidnRemoveFilterData(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnRemoveFilterData(__arg0, name);
        }

        public static void OidnSetFilterBool(global::OpenImageDenoise.OIDNFilterImpl filter, string name, bool value)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetFilterBool(__arg0, name, value);
        }

        public static void OidnSetFilter1b(global::OpenImageDenoise.OIDNFilterImpl filter, string name, bool value)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetFilter1b(__arg0, name, value);
        }

        public static bool OidnGetFilterBool(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var ___ret = __Internal.OidnGetFilterBool(__arg0, name);
            return ___ret;
        }

        public static bool OidnGetFilter1b(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var ___ret = __Internal.OidnGetFilter1b(__arg0, name);
            return ___ret;
        }

        public static void OidnSetFilterInt(global::OpenImageDenoise.OIDNFilterImpl filter, string name, int value)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetFilterInt(__arg0, name, value);
        }

        public static void OidnSetFilter1i(global::OpenImageDenoise.OIDNFilterImpl filter, string name, int value)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetFilter1i(__arg0, name, value);
        }

        public static int OidnGetFilterInt(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var ___ret = __Internal.OidnGetFilterInt(__arg0, name);
            return ___ret;
        }

        public static int OidnGetFilter1i(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var ___ret = __Internal.OidnGetFilter1i(__arg0, name);
            return ___ret;
        }

        public static void OidnSetFilterFloat(global::OpenImageDenoise.OIDNFilterImpl filter, string name, float value)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetFilterFloat(__arg0, name, value);
        }

        public static void OidnSetFilter1f(global::OpenImageDenoise.OIDNFilterImpl filter, string name, float value)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnSetFilter1f(__arg0, name, value);
        }

        public static float OidnGetFilterFloat(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var ___ret = __Internal.OidnGetFilterFloat(__arg0, name);
            return ___ret;
        }

        public static float OidnGetFilter1f(global::OpenImageDenoise.OIDNFilterImpl filter, string name)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var ___ret = __Internal.OidnGetFilter1f(__arg0, name);
            return ___ret;
        }

        public static void OidnSetFilterProgressMonitorFunction(global::OpenImageDenoise.OIDNFilterImpl filter, global::OpenImageDenoise.OIDNProgressMonitorFunction func, __IntPtr userPtr)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var __arg1 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            __Internal.OidnSetFilterProgressMonitorFunction(__arg0, __arg1, userPtr);
        }

        public static void OidnCommitFilter(global::OpenImageDenoise.OIDNFilterImpl filter)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnCommitFilter(__arg0);
        }

        public static void OidnExecuteFilter(global::OpenImageDenoise.OIDNFilterImpl filter)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnExecuteFilter(__arg0);
        }

        public static void OidnExecuteFilterAsync(global::OpenImageDenoise.OIDNFilterImpl filter)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            __Internal.OidnExecuteFilterAsync(__arg0);
        }

        public static void OidnExecuteSYCLFilterAsync(global::OpenImageDenoise.OIDNFilterImpl filter, global::OpenImageDenoise.Sycl.Event depEvents, int numDepEvents, global::OpenImageDenoise.Sycl.Event doneEvent)
        {
            var __arg0 = filter is null ? __IntPtr.Zero : filter.__Instance;
            var __arg1 = depEvents is null ? __IntPtr.Zero : depEvents.__Instance;
            var __arg3 = doneEvent is null ? __IntPtr.Zero : doneEvent.__Instance;
            __Internal.OidnExecuteSYCLFilterAsync(__arg0, __arg1, numDepEvents, __arg3);
        }
    }

    namespace Sycl
    {
        public unsafe partial class Queue
        {
            public partial struct __Internal
            {
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.Sycl.Queue> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.Sycl.Queue>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenImageDenoise.Sycl.Queue managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenImageDenoise.Sycl.Queue managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Queue __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Queue(native.ToPointer(), skipVTables);
            }

            internal static Queue __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Queue)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Queue __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Queue(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Queue(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Queue(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }
        }

        public unsafe partial class Event
        {
            public partial struct __Internal
            {
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.Sycl.Event> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenImageDenoise.Sycl.Event>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenImageDenoise.Sycl.Event managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenImageDenoise.Sycl.Event managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Event __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Event(native.ToPointer(), skipVTables);
            }

            internal static Event __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Event)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Event __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Event(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Event(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Event(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }
        }
    }
}
